//TESTO

/hacker@embryoio_level116:~$ /challenge/embryoio_level116 
WELCOME! This challenge makes the following asks of you:
- the challenge checks for a specific parent process : binary
- the challenge will make sure that stdin is redirected from a fifo
- the challenge will check for a hardcoded password over stdin : iwxsfbks

ONWARDS TO GREATNESS!

[INFO] This challenge will now perform a bunch of checks.
[INFO] If you pass these checks, you will receive the flag.
[TEST] Performing checks on the parent process of this process.
[TEST] Checking to make sure that the process is a custom binary that you created by compiling a C program
[TEST] that you wrote. Make sure your C program has a function called 'pwncollege' in it --- otherwise,
[TEST] it won't pass the checks.
[HINT] If this is a check for the *parent* process, keep in mind that the exec() family of system calls
[HINT] does NOT result in a parent-child relationship. The exec()ed process simply replaces the exec()ing
[HINT] process. Parent-child relationships are created when a process fork()s off a child-copy of itself,
[HINT] and the child-copy can then execve() a process that will be the new child. If we're checking for a
[HINT] parent process, that's how you make that relationship.
[INFO] The executable that we are checking is: /usr/bin/bash.
[HINT] One frequent cause of the executable unexpectedly being a shell or docker-init is that your
[HINT] parent process terminated before this check was run. This happens when your parent process launches
[HINT] the child but does not wait on it! Look into the waitpid() system call to wait on the child!

[HINT] Another frequent cause is the use of system() or popen() to execute the challenge. Both will actually
[HINT] execute a shell that will then execute the challenge, so the parent of the challenge will be that
[HINT] shell, rather than your program. You must use fork() and one of the exec family of functions (execve(),
[HINT] execl(), etc).
[FAIL] You did not satisfy all the execution requirements.
[FAIL] Specifically, you must fix the following issue:
[FAIL]    The process must be your own program in your own home directory.

//SOLUZIONE

hacker@embryoio_level116:~$ mkfifo qin
hacker@embryoio_level116:~$ nano my_script.c
#include<stdio.h>
#include<stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

void pwncollege(){
  pid_t const pid1 = fork();
  if(pid1==0){ 
    char *args[]= {"/challenge/embryoio_level116", NULL}; 
    execv(args[0], args);
  }
  else{
    wait(NULL);
  }
}

int main (int argc, char* argv[]){
    pwncollege();
}
hacker@embryoio_level116:~$ gcc my_script.c
hacker@embryoio_level116:~$ echo iwxsfbks > qin & ./a.out < qin